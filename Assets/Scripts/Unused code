// enemy.gameObject.SetActive(false); // скрывает врага после смерти
// public void Spawn()
    // {
    //     if (enemiesPerSpawn > 0 && EnemyList.Count < totalEnemies) // если могут еще создаваться враги
    //     {
    //         Debug.Log("s");
    //         for (int i = 0; i < enemiesPerSpawn; i++) // создаем по одному обьекту
    //         {
    //             if (EnemyList.Count < totalEnemies)
    //             {
    //                 Enemy newEnemy = Instantiate(typesOfEnemies[Random.Range(0, currentTypesOfEnemiesToSpawn)]) as Enemy; // создаем одного из врагов
    //                 newEnemy.transform.position = spawnPoint.position; // на позиции спавна
    //             }
    //         }
    //         Wait();
    //     }
    // }

    // IEnumerator Wait()
    // {
    //     yield return new WaitForSeconds(spawnDelay);// делаем спавн через "spawnDelay" колл-во секунд
    // }


    // switch (Manager.Instance.currentState) // определяем состояние игры
        // {
        //     // Меняем текста кнопки в зависимости от положения игры

        //     case Manager.GameState.gameover:
        //         playBtnLabel.text = "Play again!";
        //         //AudioSource.PlayOneShot(SoundManager.Instance.GameOver); // звук проигрыша
        //         break;

        //     case Manager.GameState.nextWave:
        //             playBtnLabel.text = "Next wave";
        //         break;

        //     case Manager.GameState.play:
        //         playBtnLabel.text = "Play Game";
        //         break;

        //     case Manager.GameState.win:
        //         playBtnLabel.text = "WIN";
        //         break;
        // }
        // playBtn.gameObject.SetActive(true); // активируем кнопку
        // playBtn.gameObject.SetActive(false); // при старте кнопка "Play выключена"


            // private void HandleEscape() // отменить нажатие на башню
    // {
    //     if (Input.GetMouseButtonDown(1)) // при нажатии правой кнопки мыши
    //     {
    //         TowerManager.Instance.DisableDrag(); // отключаем возможность перетаскивать изображение
    //         TowerManager.Instance.towerBtnPressed = null; // восстановили не кликанье по кнопке
    //     }
    // }

    //HandleEscape(); // проверка нажали ли мы "Escape" постоянно

    //SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex + 1); // загрузка следующей сцены
    //SceneManager.LoadScene("0");
    //SceneManager.LoadScene(SceneManager.GetActiveScene().name); // перегружает активную сцену 


    // public void PlayButtonPressed()
    // {
    //     switch (currentState)
    //     {
    //         // если "next"
    //         case gameStatus.next:
                
    //             break;

                
    //         default:
                
                
                
                
    //             //HUDController.Instance.UpdateMenu();
    //             //audioSource.PlayOneShot(SoundManager.Instance.NewGame); // единожды играть
    //             break;
    //     }
        
        
    //     //HUDController.Instance.WaveNumberUpdate(waveNumber);
    //     StartCoroutine(Spawn()); // вызываем спавн новых противников
    //     //HUDController.Instance.playBtn.gameObject.SetActive(false); // отключаем кнопку
    // }

    // public void SelectedTower(TowerBtn towerSelected) // проверка какая башня выбрана для постройки
    // {
    //     // если башня стоит дешевле чем у нас есть денег
    //     if (towerSelected.TowerPrice <= Manager.Instance.TotalMoney)
    //     {
    //         // то мы можем её купить
    //         towerBtnPressed = towerSelected; // каждой кнопке соответсвует своя башня
    //     }
    // }
//if (isAttacking == true) // если можно стрелять
        //{
        //    Attack(); // стреляем
        //}

        // attackCounter -= Time.deltaTime; // снижается с течением времени


// // если задержка между выстрелами прошла
            // if (attackCounter <= 0)
            // {
            //     // то можно стрелять
            //     isAttacking = true;
            //     projectileDel = false;
            //     Attack(); // стреляем

            //     // счетчик должен быть востановлен
            //     attackCounter = timeBetweenAttacks;
            // }
            // else
            // {
            //     isAttacking = false;
            // }



// AudioSource audioSource; // для звуков
    // public AudioSource AudioSource 
    // {
    //     get
    //     {
    //         return audioSource;
    //     }
    // }

     //audioSource = GetComponent<AudioSource>(); // реализуем


     // if(towerBtnPressed != null) // Если кто-то нажал на башню
        // {
        //     EnableDrag(towerBtnPressed.DragSprite); // считывает с кнопки ту башню которая нам нужна
        //     if (Input.GetMouseButtonDown(0)) // Если нажимаем левую кнопку
        //     {
        //         Vector2 mousePoint = Camera.main.ScreenToWorldPoint(Input.mousePosition); // считывает где мы кликаем мышью относительно нашей камеры (и куда навели там и будет башня)
        //         RaycastHit2D hit = Physics2D.Raycast(mousePoint, Vector2.zero); // создаем луч считывающий можно ли нам ставить башню

        //         if (hit.collider.tag == "TowerSide") // если тег "TowerSide"
        //         {
        //             BuyTower(towerBtnPressed.TowerPrice); // покупаем башню
        //             PlaceTower(hit); // размещаем башню
        //             DisableDrag(); // деактивируем картинку башни при перетаскивании
        //             buildTile = hit.collider; // переименовываем
        //             RegisterBuildSite(buildTile); // регистрируем новую башню
        //             buildTile.tag = "TowerSideFull"; // заменяем тег чтобы считывать что бащня уже поставленна в этом месте
        //             towerBtnPressed = null; // выключаем прожатую кнопку башни
        //             //Manager.Instance.AudioSource.PlayOneShot(SoundManager.Instance.TowerBuilt); // звук постройки башни
        //         }
        //     }   
        //     if(Input.GetMouseButtonDown(1))// скидываем башню при нажатии правой кнопки
        //     {
        //         DisableDrag();
        //         towerBtnPressed = null;
        //     }
        //     if (spriteRenderer.enabled) // если спрайт активен
        //     {
        //         FollowMouse();
        //     }
        // }

        
// public TowerBtn towerBtnPressed { 
    //     get
    //     {
    //         return _towerBtnPressed;
    //     }
    //     set
    //     {
            
    //         if(value == null || IsTowerAffordable(value)) // проверка можем ли мы её позволить
    //         {
    //             _towerBtnPressed = value;
    //         }
    //         else _towerBtnPressed = null;
    //     }
    // } // нажата ли кнопка

      // private TowerBtn _towerBtnPressed;

 //SpriteRenderer spriteRenderer; // для отображения картинки при перетягивании башни
 //spriteRenderer = GetComponent<SpriteRenderer>(); // реализуем 
        //buildTile = GetComponent<Collider2D>(); // реализуем коллайдеры башен

                //spriteRenderer.enabled = false; // на всякий случай в начале игры удаляем все картинки башен


                // public void FollowMouse() // слежение башни за мышью
    // {
    //     transform.position = Camera.main.ScreenToWorldPoint(Input.mousePosition); // привязка к курсору относительно экрана
    //     transform.position = new Vector2(transform.position.x, transform.position.y); // изменение позиции
    // }

    // public void EnableDrag(Sprite sprite) // метод что мы можем передвигать нашу башню за курсором
    // {
    //     spriteRenderer.enabled = true; // включает отображение картинки
    //     spriteRenderer.sprite = sprite; // картинка одной из башен
    // }
    // public void DisableDrag() // деактивация картинки движения башни за курсором 
    // {
    //     spriteRenderer.enabled = false; // выключает отображение картинки

    // public void OnTowerBtnClick(TowerBtn newTowerBtnPressed)
    // {
    //     towerBtnPressed = newTowerBtnPressed;
    // }

    // // ЭТО ЯВНО ДОЛЖНО БЫТЬ НЕ ТУТ, НО У МЕНЯ ТОЛЬКО ТАК ВЫШЛО
    //     if (waveNumber == totalWaves - 2)
    //     {
    //         playBtnLabel.text = "Final wave";
    //     }